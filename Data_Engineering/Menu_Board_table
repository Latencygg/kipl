# 사용 라이브러리 : pandas, google.cloud, re, mysql.connector
# 사용 API : Vertual AI's Jupyter Notebook, GCP CloudSQL-MySQL

# My Bucket Name : jnu-idv-05-data

# 코드 이용시 주의사항 : GCP Vertual AI's Jupyter NoteBook으로 작업을 하여서, 파일 다운로드 path나 csv저장 경로는 local에서 진행시 각 체제의 맞게 변경 바람!!
========================================================================================================================================================================
========================================================================================================================================================================

# [코드]

import pandas as pd
from google.cloud import storage
import re
import mysql.connector

# GCP Bucket과 관련된 인증 정보를 설정합니다.
# 인증 정보는 GCP Console에서 JSON 파일로 다운로드 받을 수 있습니다.
# 이 파일은 GCP 서비스 계정 키가 포함되어 있어야 합니다.
client = storage.Client.from_service_account_json('../../jnu-idv-05-2bb784a064b0.json')

#TODO : bucket_name에 name 삽입
# 가져올 파일이 있는 GCP Bucket의 이름과 파일 경로를 지정합니다.
bucket_name = {YOUR BUCKET NAME}
file_path1 = '이유식_초기1단계식단표(raw).txt'
file_path2 = '이유식_초기2단계식단표(raw).txt'
file_path3 = '이유식_중기1단계식단표(raw).txt'
file_path4 = '이유식_중기2단계식단표(raw).txt'
file_path5 = '이유식_후기1단계식단표(raw).txt'
file_path6 = '이유식_후기2단계식단표(raw).txt'

# 파일을 GCP Bucket에서 Jupyter 경로로 복사합니다.
bucket = client.get_bucket(bucket_name)
blob1 = bucket.blob(file_path1)
blob2 = bucket.blob(file_path2)
blob3 = bucket.blob(file_path3)
blob4 = bucket.blob(file_path4)
blob5 = bucket.blob(file_path5)
blob6 = bucket.blob(file_path6)

# 파일을 로컬에 다운
blob1.download_to_filename('이유식_초기1단계식단표(raw).txt')
blob2.download_to_filename('이유식_초기2단계식단표(raw).txt')
blob3.download_to_filename('이유식_중기1단계식단표(raw).txt')
blob4.download_to_filename('이유식_중기2단계식단표(raw).txt')
blob5.download_to_filename('이유식_후기1단계식단표(raw).txt')
blob6.download_to_filename('이유식_후기2단계식단표(raw).txt')

# 다운받은 파일 변수에 저장
Baby_Food_Initial_Table = '이유식_초기1단계식단표(raw).txt'
Baby_Food_Initial_Table2 = '이유식_초기2단계식단표(raw).txt'
Baby_Food_Medium_Phase_Table = '이유식_중기1단계식단표(raw).txt'
Baby_Food_Medium_Phase_Table2 = '이유식_중기2단계식단표(raw).txt'
Baby_Food_last_stage_Table = '이유식_후기1단계식단표(raw).txt'
Baby_Food_last_stage_Table2 = '이유식_후기2단계식단표(raw).txt'


# NEW 단어 re로 컴파일
p = re.compile('NEW')

Initial_list = []
Initial_list2 = []
Medium_list = []
Medium_list2 = []
Last_stage = []
Last_stage2 = []


# 다운 받은 raw데이터 규격에 맞게 전처리
def parse_menu(x):
    temp = []
    with open(x, mode='r') as f_file:
        a = f_file.read()

    # 정규식 패턴 생성
    p2 = re.compile(r'이유식 [1-3]단계 식단표')
    a = p2.sub('', a)  # p2와 일치하는 부분을 모두 제거

    # 숫자와 문장 추출
    pattern = r'(\d+)\s+(.*?)(?=\d+\s+|$)'  # 숫자 다음에 오는 문장을 추출하는 패턴
    matches = re.findall(pattern, a, re.DOTALL)

    # 결과를 리스트로 저장
    text = []
    cleaned_text = []
    for match in matches:
        number, sentence = match
        text.append([int(number)] + sentence.split('\n'))
        
    for i in text:
        if 'D+' not in i:
            continue
        cleaned_text.append([x for x in i if x != ''])
    sorted_cleaned_text = sorted(cleaned_text, key=lambda x: int(x[0]), reverse=False)
    
    for i in sorted_cleaned_text:
        if 'D+' in i[1]:  # 'D+'가 있는 경우
            d_plus_index = i[1].index('D+')  # 'D+'가 있는 인덱스를 찾음
            d_plus_with_number = i[1][:d_plus_index+2] + str(i[0])  # 'D+' 뒤에 숫자 추가
            temp.append([d_plus_with_number] + i[2:])  # 리스트에 추가
        else:
            temp.append(i[1:])  # 'D+'가 없는 경우 그대로 리스트에 추가
        # 재료들을 하나의 문자열로 묶기 (NEW 제외)
    Last_stage_new = []
    for row in temp:
        if p.search(row[-1]):
            ingredients = ', '.join([ingredient for ingredient in row[1:-1]])
            Last_stage_new.append([row[0], ingredients,row[-1]])
        else:
            ingredients = ', '.join([ingredient for ingredient in row[1:]])
            Last_stage_new.append([row[0], ingredients,"null"])
    return Last_stage_new

if __name__=="__main__":
    Initial_list = parse_menu(Baby_Food_Initial_Table)
    Initial_list2 = parse_menu(Baby_Food_Initial_Table2)
    Medium_list = parse_menu(Baby_Food_Medium_Phase_Table)
    Medium_list2 = parse_menu(Baby_Food_Medium_Phase_Table2)
    Last_stage = parse_menu(Baby_Food_last_stage_Table)
    Last_stage2 = parse_menu(Baby_Food_last_stage_Table2)

    Initial_level1_df = pd.DataFrame(Initial_list)
    Initial_level2_df = pd.DataFrame(Initial_list2)
    Medium_level1_df = pd.DataFrame(Medium_list)
    Medium_level2_df = pd.DataFrame(Medium_list2)
    Last_level1_df = pd.DataFrame(Last_stage)
    Last_level2_df = pd.DataFrame(Last_stage2)
    
        
    # DataFrame을 list up
    df_list = [Initial_level1_df,Initial_level2_df,Medium_level1_df,Medium_level2_df,Last_level1_df,Last_level2_df]
    
    
    # 변경할 컬럼 순서 정의
    new_column_order = ['Day', 'Food_name', 'New_ingredient']
    
    # 각각에 포함되는 단계로 컴럼값 추가
    for num in range(len(df_list)):
        df_list[num].columns = new_column_order
        if num < 2:
            df_list[num]['Category'] = '초기'
        elif num > 3:
            df_list[num]['Category'] = '후기'
        else:
            df_list[num]['Category'] = '중기'
total_df = pd.concat([df_list[0],df_list[1],df_list[2],df_list[3],df_list[4],df_list[5]], axis=0)


# 외부 IP로 GCP에 CLOUDSQL에 연결 객체 생성
# Replace with your connection details
db_config = {
    'user': 'root',
    'password': 'gusdn@0228',
    'host': '34.70.107.83',
    'database': 'allergy'
}


# menu_board_example table을 생성하고 분류했던 내용들을 삽입
create_tbl = "CREATE TABLE IF NOT EXISTS menu_board_example (Day varchar(10),Food_name varchar(100), New_ingredient varchar(100), Category varchar(5));"

try:
    connection = mysql.connector.connect(**db_config)
    cursor = connection.cursor()
    cursor.execute(create_tbl)
    for index, row in total_df.iterrows():
        day = row['Day']
        food = row['Food_name']
        ingredient = row['New_ingredient']
        category = row['Category']
        values = (day,food,ingredient,category)
        query = "INSERT INTO menu_board_example VALUES (%s, %s, %s, %s)"
        cursor.execute(query, values)
    connection.commit()
    print("Data inserted successfully!")

except mysql.connector.Error as error:
    print("Error:", error)

finally:
    if connection.is_connected():
        cursor.close()
        connection.close()
        print("Connection closed")
